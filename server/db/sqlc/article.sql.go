// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: article.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createArticle = `-- name: CreateArticle :one
INSERT INTO articles (
  title,
  content,
  updated_at,
  user_id
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, title, content, created_at, updated_at, user_id
`

type CreateArticleParams struct {
	Title     string
	Content   string
	UpdatedAt time.Time
	UserID    uuid.UUID
}

func (q *Queries) CreateArticle(ctx context.Context, arg CreateArticleParams) (Article, error) {
	row := q.db.QueryRowContext(ctx, createArticle,
		arg.Title,
		arg.Content,
		arg.UpdatedAt,
		arg.UserID,
	)
	var i Article
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
	)
	return i, err
}

const deleteArticle = `-- name: DeleteArticle :exec
DELETE FROM articles
WHERE id = $1
`

func (q *Queries) DeleteArticle(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteArticle, id)
	return err
}

const getArticleById = `-- name: GetArticleById :one
SELECT id, title, content, created_at, updated_at, user_id FROM articles
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetArticleById(ctx context.Context, id uuid.UUID) (Article, error) {
	row := q.db.QueryRowContext(ctx, getArticleById, id)
	var i Article
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
	)
	return i, err
}

const getArticleByUserId = `-- name: GetArticleByUserId :one
SELECT id, title, content, created_at, updated_at, user_id FROM articles
WHERE user_id = $1 LIMIT 1
`

func (q *Queries) GetArticleByUserId(ctx context.Context, userID uuid.UUID) (Article, error) {
	row := q.db.QueryRowContext(ctx, getArticleByUserId, userID)
	var i Article
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
	)
	return i, err
}

const listArticles = `-- name: ListArticles :many
SELECT id, title, content, created_at, updated_at, user_id FROM articles
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListArticlesParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListArticles(ctx context.Context, arg ListArticlesParams) ([]Article, error) {
	rows, err := q.db.QueryContext(ctx, listArticles, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Article
	for rows.Next() {
		var i Article
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateArticle = `-- name: UpdateArticle :one
UPDATE articles
set title = $2,
content = $3,
updated_at = $4
WHERE id = $1
RETURNING id, title, content, created_at, updated_at, user_id
`

type UpdateArticleParams struct {
	ID        uuid.UUID
	Title     string
	Content   string
	UpdatedAt time.Time
}

func (q *Queries) UpdateArticle(ctx context.Context, arg UpdateArticleParams) (Article, error) {
	row := q.db.QueryRowContext(ctx, updateArticle,
		arg.ID,
		arg.Title,
		arg.Content,
		arg.UpdatedAt,
	)
	var i Article
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
	)
	return i, err
}
